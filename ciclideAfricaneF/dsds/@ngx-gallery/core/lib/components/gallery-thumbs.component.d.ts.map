{"version":3,"file":"gallery-thumbs.component.d.ts","sources":["gallery-thumbs.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnDestroy, OnInit, OnChanges, NgZone, ElementRef, EventEmitter } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { GalleryConfig } from '../models/config.model';\nimport { GalleryState, GalleryError } from '../models/gallery.model';\nimport { SliderState } from '../models/slider.model';\nexport declare class GalleryThumbsComponent implements OnInit, OnChanges, OnDestroy {\n    private _el;\n    private _zone;\n    /** Sliding worker */\n    private readonly _slidingWorker$;\n    /** HammerJS instance */\n    private _hammer;\n    /** Current slider position in free sliding mode */\n    private _freeModeCurrentOffset;\n    /** Stream that emits sliding state */\n    sliderState$: Observable<SliderState>;\n    /** Gallery state */\n    state: GalleryState;\n    /** Gallery config */\n    config: GalleryConfig;\n    /** Stream that emits when the active item should change */\n    action: EventEmitter<string | number>;\n    /** Stream that emits when thumb is clicked */\n    thumbClick: EventEmitter<number>;\n    /** Stream that emits when an error occurs */\n    error: EventEmitter<GalleryError>;\n    /** Host height */\n    height: string;\n    /** Host width */\n    width: string;\n    constructor(_el: ElementRef, _zone: NgZone);\n    ngOnChanges(): void;\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Sliding strict mode\n     */\n    private strictMode;\n    /**\n     * Sliding free mode\n     */\n    private freeMode;\n    /**\n     * Check if the minimum free scroll is exceeded (used in Bottom, Left directions)\n     */\n    private minFreeScrollExceeded;\n    /**\n     * Check if the maximum free scroll is exceeded (used in Top, Right directions)\n     */\n    private maxFreeScrollExceeded;\n    /**\n     * Convert sliding state to styles\n     */\n    private getSliderStyles;\n    private verticalPan;\n    private horizontalPan;\n    private next;\n    private prev;\n    private updateSlider;\n}\n"]}