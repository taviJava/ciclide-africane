{"version":3,"file":"ngx-gallery-gallerize.js","sources":["@ngx-gallery/gallerize/lib/gallerize.directive.ts","@ngx-gallery/gallerize/lib/gallerize.module.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Directive,\n  Input,\n  OnInit,\n  OnDestroy,\n  Inject,\n  Optional,\n  Self,\n  Host,\n  NgZone,\n  ElementRef,\n  Renderer2,\n  PLATFORM_ID\n} from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\n\nimport { Gallery, GalleryRef, ImageItem, GalleryComponent, GalleryState, GalleryItem } from '@ngx-gallery/core';\nimport { Lightbox } from '@ngx-gallery/lightbox';\n\nimport { Subject, Subscription, from, EMPTY } from 'rxjs';\nimport { tap, map, switchMap, finalize, debounceTime } from 'rxjs/operators';\n\n/**\n * This directive has 2 modes:\n * 1 - If host element is a HTMLElement, it detects the images and hooks their clicks to lightbox\n * 2 - If host element is a GalleryComponent, it hooks the images click to the lightbox\n */\n\nconst enum GallerizeMode {\n  Detector = 'detector',\n  Gallery = 'gallery'\n}\n\n@Directive({\n  selector: '[gallerize]'\n})\nexport class GallerizeDirective implements OnInit, OnDestroy {\n\n  /** Default gallery id */\n  private _galleryId = 'lightbox';\n\n  /** Gallerize mode */\n  private readonly _mode: GallerizeMode;\n\n  /** If host element is a HTMLElement, will use the following variables: */\n\n  /** Stream that emits to fire the detection stream the image elements has changed */\n  private _observer$: any;\n\n  /** Stream that emits when image is discover */\n  private _detector$: Subject<any>;\n\n  /** If host element is a GalleryComponent, will use the following variables: */\n\n  /** Gallery events (if used on a gallery component) */\n  private _itemClick$: Subscription;\n  private _itemChange$: Subscription;\n\n  // ======================================================\n\n  /** If set, it will become the gallery id */\n  @Input() gallerize: string;\n\n  /** The selector used to query images elements */\n  @Input() selector = 'img';\n\n  constructor(private _zone: NgZone,\n              private _el: ElementRef,\n              private _gallery: Gallery,\n              private _lightbox: Lightbox,\n              private _renderer: Renderer2,\n              @Inject(PLATFORM_ID) platform: Object,\n              @Inject(DOCUMENT) private _document: any,\n              @Host() @Self() @Optional() private _galleryCmp: GalleryComponent) {\n\n    // Set gallerize mode\n    if (isPlatformBrowser(platform)) {\n      this._mode = _galleryCmp ? GallerizeMode.Gallery : GallerizeMode.Detector;\n    }\n  }\n\n  ngOnInit() {\n    this._zone.runOutsideAngular(() => {\n      this._galleryId = this.gallerize || this._galleryId;\n      const ref = this._gallery.ref(this._galleryId);\n\n      switch (this._mode) {\n        case GallerizeMode.Detector:\n          this.detectorMode(ref);\n          break;\n        case GallerizeMode.Gallery:\n          this.galleryMode(ref);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    switch (this._mode) {\n      case GallerizeMode.Detector:\n        this._detector$.complete();\n        this._observer$.disconnect();\n        break;\n      case GallerizeMode.Gallery:\n        this._itemClick$.unsubscribe();\n        this._itemChange$.unsubscribe();\n    }\n  }\n\n  /** Gallery mode: means `gallerize` directive is used on `<gallery>` component\n   * Adds a click event to each gallery item so it opens in lightbox */\n  private galleryMode(galleryRef: GalleryRef) {\n    // Clone its items to the new gallery instance\n    this._itemClick$ = this._galleryCmp.galleryRef.itemClick.subscribe((i: number) => this._lightbox.open(i, this._galleryId));\n    this._itemChange$ = this._galleryCmp.galleryRef.itemsChanged.subscribe((state: GalleryState) => galleryRef.load(state.items));\n  }\n\n  /** Detector mode: means `gallerize` directive is used on a normal HTMLElement\n   *  Detects images and adds a click event to each image so it opens in the lightbox */\n  private detectorMode(galleryRef: GalleryRef) {\n    this._detector$ = new Subject();\n    // Query image elements\n    this._detector$.pipe(\n      debounceTime(300),\n      switchMap(() => {\n\n        /** get all img elements from content */\n        const imageElements = this._el.nativeElement.querySelectorAll(this.selector);\n\n        if (imageElements && imageElements.length) {\n\n          const images: GalleryItem[] = [];\n\n          return from(imageElements).pipe(\n            map((el: any, i) => {\n              // Add click event to the image\n              this._renderer.setStyle(el, 'cursor', 'pointer');\n              this._renderer.setProperty(el, 'onclick', () =>\n                this._zone.run(() => this._lightbox.open(i, this._galleryId))\n              );\n\n              if (el instanceof HTMLImageElement) {\n                // If element is type of img use the src property\n                return {\n                  src: el.getAttribute('imageSrc') || el.src,\n                  thumb: el.getAttribute('thumbSrc') || el.src\n                };\n              } else {\n                // Otherwise, use element background-image url\n                const elStyle = el.currentStyle || this._document.defaultView.getComputedStyle(el, null);\n                const background = elStyle.backgroundImage.slice(4, -1).replace(/\"/g, '');\n                return {\n                  src: el.getAttribute('imageSrc') || background,\n                  thumb: el.getAttribute('thumbSrc') || background\n                };\n              }\n            }),\n            tap((data: any) => images.push(new ImageItem(data))),\n            finalize(() => galleryRef.load(images))\n          );\n        } else {\n          return EMPTY;\n        }\n      })\n    ).subscribe();\n\n    // Observe content changes\n    this._observer$ = new MutationObserver(() => this._detector$.next());\n    this._observer$.observe(this._el.nativeElement, {childList: true, subtree: true});\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { GalleryModule } from '@ngx-gallery/core';\nimport { LightboxModule } from '@ngx-gallery/lightbox';\nimport { GallerizeDirective } from './gallerize.directive';\n\n@NgModule({\n  imports: [\n    GalleryModule,\n    LightboxModule\n  ],\n  declarations: [GallerizeDirective],\n  exports: [GallerizeDirective]\n})\nexport class GallerizeModule {\n\n}\n"]}