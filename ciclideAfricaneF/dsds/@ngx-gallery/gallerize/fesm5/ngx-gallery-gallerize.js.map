{"version":3,"file":"ngx-gallery-gallerize.js.map","sources":["ng://@ngx-gallery/gallerize/lib/gallerize.directive.ts","ng://@ngx-gallery/gallerize/lib/gallerize.module.ts"],"sourcesContent":["import {\n  Directive,\n  Input,\n  OnInit,\n  OnDestroy,\n  Inject,\n  Optional,\n  Self,\n  Host,\n  NgZone,\n  ElementRef,\n  Renderer2,\n  PLATFORM_ID\n} from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\n\nimport { Gallery, GalleryRef, ImageItem, GalleryComponent, GalleryState, GalleryItem } from '@ngx-gallery/core';\nimport { Lightbox } from '@ngx-gallery/lightbox';\n\nimport { Subject, Subscription, from, EMPTY } from 'rxjs';\nimport { tap, map, switchMap, finalize, debounceTime } from 'rxjs/operators';\n\n/**\n * This directive has 2 modes:\n * 1 - If host element is a HTMLElement, it detects the images and hooks their clicks to lightbox\n * 2 - If host element is a GalleryComponent, it hooks the images click to the lightbox\n */\n\nconst enum GallerizeMode {\n  Detector = 'detector',\n  Gallery = 'gallery'\n}\n\n@Directive({\n  selector: '[gallerize]'\n})\nexport class GallerizeDirective implements OnInit, OnDestroy {\n\n  /** Default gallery id */\n  private _galleryId = 'lightbox';\n\n  /** Gallerize mode */\n  private readonly _mode: GallerizeMode;\n\n  /** If host element is a HTMLElement, will use the following variables: */\n\n  /** Stream that emits to fire the detection stream the image elements has changed */\n  private _observer$: any;\n\n  /** Stream that emits when image is discover */\n  private _detector$: Subject<any>;\n\n  /** If host element is a GalleryComponent, will use the following variables: */\n\n  /** Gallery events (if used on a gallery component) */\n  private _itemClick$: Subscription;\n  private _itemChange$: Subscription;\n\n  // ======================================================\n\n  /** If set, it will become the gallery id */\n  @Input() gallerize: string;\n\n  /** The selector used to query images elements */\n  @Input() selector = 'img';\n\n  constructor(private _zone: NgZone,\n              private _el: ElementRef,\n              private _gallery: Gallery,\n              private _lightbox: Lightbox,\n              private _renderer: Renderer2,\n              @Inject(PLATFORM_ID) platform: Object,\n              @Inject(DOCUMENT) private _document: any,\n              @Host() @Self() @Optional() private _galleryCmp: GalleryComponent) {\n\n    // Set gallerize mode\n    if (isPlatformBrowser(platform)) {\n      this._mode = _galleryCmp ? GallerizeMode.Gallery : GallerizeMode.Detector;\n    }\n  }\n\n  ngOnInit() {\n    this._zone.runOutsideAngular(() => {\n      this._galleryId = this.gallerize || this._galleryId;\n      const ref = this._gallery.ref(this._galleryId);\n\n      switch (this._mode) {\n        case GallerizeMode.Detector:\n          this.detectorMode(ref);\n          break;\n        case GallerizeMode.Gallery:\n          this.galleryMode(ref);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    switch (this._mode) {\n      case GallerizeMode.Detector:\n        this._detector$.complete();\n        this._observer$.disconnect();\n        break;\n      case GallerizeMode.Gallery:\n        this._itemClick$.unsubscribe();\n        this._itemChange$.unsubscribe();\n    }\n  }\n\n  /** Gallery mode: means `gallerize` directive is used on `<gallery>` component\n   * Adds a click event to each gallery item so it opens in lightbox */\n  private galleryMode(galleryRef: GalleryRef) {\n    // Clone its items to the new gallery instance\n    this._itemClick$ = this._galleryCmp.galleryRef.itemClick.subscribe((i: number) => this._lightbox.open(i, this._galleryId));\n    this._itemChange$ = this._galleryCmp.galleryRef.itemsChanged.subscribe((state: GalleryState) => galleryRef.load(state.items));\n  }\n\n  /** Detector mode: means `gallerize` directive is used on a normal HTMLElement\n   *  Detects images and adds a click event to each image so it opens in the lightbox */\n  private detectorMode(galleryRef: GalleryRef) {\n    this._detector$ = new Subject();\n    // Query image elements\n    this._detector$.pipe(\n      debounceTime(300),\n      switchMap(() => {\n\n        /** get all img elements from content */\n        const imageElements = this._el.nativeElement.querySelectorAll(this.selector);\n\n        if (imageElements && imageElements.length) {\n\n          const images: GalleryItem[] = [];\n\n          return from(imageElements).pipe(\n            map((el: any, i) => {\n              // Add click event to the image\n              this._renderer.setStyle(el, 'cursor', 'pointer');\n              this._renderer.setProperty(el, 'onclick', () =>\n                this._zone.run(() => this._lightbox.open(i, this._galleryId))\n              );\n\n              if (el instanceof HTMLImageElement) {\n                // If element is type of img use the src property\n                return {\n                  src: el.getAttribute('imageSrc') || el.src,\n                  thumb: el.getAttribute('thumbSrc') || el.src\n                };\n              } else {\n                // Otherwise, use element background-image url\n                const elStyle = el.currentStyle || this._document.defaultView.getComputedStyle(el, null);\n                const background = elStyle.backgroundImage.slice(4, -1).replace(/\"/g, '');\n                return {\n                  src: el.getAttribute('imageSrc') || background,\n                  thumb: el.getAttribute('thumbSrc') || background\n                };\n              }\n            }),\n            tap((data: any) => images.push(new ImageItem(data))),\n            finalize(() => galleryRef.load(images))\n          );\n        } else {\n          return EMPTY;\n        }\n      })\n    ).subscribe();\n\n    // Observe content changes\n    this._observer$ = new MutationObserver(() => this._detector$.next());\n    this._observer$.observe(this._el.nativeElement, {childList: true, subtree: true});\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { GalleryModule } from '@ngx-gallery/core';\nimport { LightboxModule } from '@ngx-gallery/lightbox';\nimport { GallerizeDirective } from './gallerize.directive';\n\n@NgModule({\n  imports: [\n    GalleryModule,\n    LightboxModule\n  ],\n  declarations: [GallerizeDirective],\n  exports: [GallerizeDirective]\n})\nexport class GallerizeModule {\n\n}\n"],"names":[],"mappings":"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"}
